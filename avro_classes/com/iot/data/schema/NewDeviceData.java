/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NewDeviceData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7587056438231998050L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NewDeviceData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"action\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"context\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ContextData\",\"fields\":[{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FeaturesData\",\"fields\":[{\"name\":\"hasNFC\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasTelephony\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasGPS\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasAccelerometer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasBarometer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasCompass\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasGyroscope\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasLightsensor\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasProximity\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"bluetoothVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DisplayData\",\"fields\":[{\"name\":\"displayHeight\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"displayWidth\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"displayDensity\",\"type\":[\"null\",\"long\"],\"default\":null}]}],\"default\":null},{\"name\":\"totalMemoryInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TotalMemoryInfoData\",\"fields\":[{\"name\":\"totalRAM\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"totalStorage\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String timestamp;
  @Deprecated public java.lang.String action;
  @Deprecated public com.iot.data.schema.ContextData context;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NewDeviceData() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param action The new value for action
   * @param context The new value for context
   */
  public NewDeviceData(java.lang.String timestamp, java.lang.String action, com.iot.data.schema.ContextData context) {
    this.timestamp = timestamp;
    this.action = action;
    this.context = context;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return action;
    case 2: return context;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.String)value$; break;
    case 1: action = (java.lang.String)value$; break;
    case 2: context = (com.iot.data.schema.ContextData)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.String getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.String value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public java.lang.String getAction() {
    return action;
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(java.lang.String value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'context' field.
   * @return The value of the 'context' field.
   */
  public com.iot.data.schema.ContextData getContext() {
    return context;
  }

  /**
   * Sets the value of the 'context' field.
   * @param value the value to set.
   */
  public void setContext(com.iot.data.schema.ContextData value) {
    this.context = value;
  }

  /**
   * Creates a new NewDeviceData RecordBuilder.
   * @return A new NewDeviceData RecordBuilder
   */
  public static com.iot.data.schema.NewDeviceData.Builder newBuilder() {
    return new com.iot.data.schema.NewDeviceData.Builder();
  }

  /**
   * Creates a new NewDeviceData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NewDeviceData RecordBuilder
   */
  public static com.iot.data.schema.NewDeviceData.Builder newBuilder(com.iot.data.schema.NewDeviceData.Builder other) {
    return new com.iot.data.schema.NewDeviceData.Builder(other);
  }

  /**
   * Creates a new NewDeviceData RecordBuilder by copying an existing NewDeviceData instance.
   * @param other The existing instance to copy.
   * @return A new NewDeviceData RecordBuilder
   */
  public static com.iot.data.schema.NewDeviceData.Builder newBuilder(com.iot.data.schema.NewDeviceData other) {
    return new com.iot.data.schema.NewDeviceData.Builder(other);
  }

  /**
   * RecordBuilder for NewDeviceData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NewDeviceData>
    implements org.apache.avro.data.RecordBuilder<NewDeviceData> {

    private java.lang.String timestamp;
    private java.lang.String action;
    private com.iot.data.schema.ContextData context;
    private com.iot.data.schema.ContextData.Builder contextBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.NewDeviceData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.action)) {
        this.action = data().deepCopy(fields()[1].schema(), other.action);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.context)) {
        this.context = data().deepCopy(fields()[2].schema(), other.context);
        fieldSetFlags()[2] = true;
      }
      if (other.hasContextBuilder()) {
        this.contextBuilder = com.iot.data.schema.ContextData.newBuilder(other.getContextBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing NewDeviceData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.NewDeviceData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.action)) {
        this.action = data().deepCopy(fields()[1].schema(), other.action);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.context)) {
        this.context = data().deepCopy(fields()[2].schema(), other.context);
        fieldSetFlags()[2] = true;
      }
      this.contextBuilder = null;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.String getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.iot.data.schema.NewDeviceData.Builder setTimestamp(java.lang.String value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.iot.data.schema.NewDeviceData.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public java.lang.String getAction() {
      return action;
    }

    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public com.iot.data.schema.NewDeviceData.Builder setAction(java.lang.String value) {
      validate(fields()[1], value);
      this.action = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public com.iot.data.schema.NewDeviceData.Builder clearAction() {
      action = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'context' field.
      * @return The value.
      */
    public com.iot.data.schema.ContextData getContext() {
      return context;
    }

    /**
      * Sets the value of the 'context' field.
      * @param value The value of 'context'.
      * @return This builder.
      */
    public com.iot.data.schema.NewDeviceData.Builder setContext(com.iot.data.schema.ContextData value) {
      validate(fields()[2], value);
      this.contextBuilder = null;
      this.context = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'context' field has been set.
      * @return True if the 'context' field has been set, false otherwise.
      */
    public boolean hasContext() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'context' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.iot.data.schema.ContextData.Builder getContextBuilder() {
      if (contextBuilder == null) {
        if (hasContext()) {
          setContextBuilder(com.iot.data.schema.ContextData.newBuilder(context));
        } else {
          setContextBuilder(com.iot.data.schema.ContextData.newBuilder());
        }
      }
      return contextBuilder;
    }

    /**
     * Sets the Builder instance for the 'context' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.iot.data.schema.NewDeviceData.Builder setContextBuilder(com.iot.data.schema.ContextData.Builder value) {
      clearContext();
      contextBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'context' field has an active Builder instance
     * @return True if the 'context' field has an active Builder instance
     */
    public boolean hasContextBuilder() {
      return contextBuilder != null;
    }

    /**
      * Clears the value of the 'context' field.
      * @return This builder.
      */
    public com.iot.data.schema.NewDeviceData.Builder clearContext() {
      context = null;
      contextBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public NewDeviceData build() {
      try {
        NewDeviceData record = new NewDeviceData();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.String) defaultValue(fields()[0]);
        record.action = fieldSetFlags()[1] ? this.action : (java.lang.String) defaultValue(fields()[1]);
        if (contextBuilder != null) {
          record.context = this.contextBuilder.build();
        } else {
          record.context = fieldSetFlags()[2] ? this.context : (com.iot.data.schema.ContextData) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
