/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TelephoneData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2838540403730110555L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TelephoneData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"phoneCarrier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phoneRadio\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"inRoaming\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String phoneCarrier;
  @Deprecated public java.lang.String phoneRadio;
  @Deprecated public java.lang.Boolean inRoaming;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TelephoneData() {}

  /**
   * All-args constructor.
   * @param phoneCarrier The new value for phoneCarrier
   * @param phoneRadio The new value for phoneRadio
   * @param inRoaming The new value for inRoaming
   */
  public TelephoneData(java.lang.String phoneCarrier, java.lang.String phoneRadio, java.lang.Boolean inRoaming) {
    this.phoneCarrier = phoneCarrier;
    this.phoneRadio = phoneRadio;
    this.inRoaming = inRoaming;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return phoneCarrier;
    case 1: return phoneRadio;
    case 2: return inRoaming;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: phoneCarrier = (java.lang.String)value$; break;
    case 1: phoneRadio = (java.lang.String)value$; break;
    case 2: inRoaming = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'phoneCarrier' field.
   * @return The value of the 'phoneCarrier' field.
   */
  public java.lang.String getPhoneCarrier() {
    return phoneCarrier;
  }

  /**
   * Sets the value of the 'phoneCarrier' field.
   * @param value the value to set.
   */
  public void setPhoneCarrier(java.lang.String value) {
    this.phoneCarrier = value;
  }

  /**
   * Gets the value of the 'phoneRadio' field.
   * @return The value of the 'phoneRadio' field.
   */
  public java.lang.String getPhoneRadio() {
    return phoneRadio;
  }

  /**
   * Sets the value of the 'phoneRadio' field.
   * @param value the value to set.
   */
  public void setPhoneRadio(java.lang.String value) {
    this.phoneRadio = value;
  }

  /**
   * Gets the value of the 'inRoaming' field.
   * @return The value of the 'inRoaming' field.
   */
  public java.lang.Boolean getInRoaming() {
    return inRoaming;
  }

  /**
   * Sets the value of the 'inRoaming' field.
   * @param value the value to set.
   */
  public void setInRoaming(java.lang.Boolean value) {
    this.inRoaming = value;
  }

  /**
   * Creates a new TelephoneData RecordBuilder.
   * @return A new TelephoneData RecordBuilder
   */
  public static com.iot.data.schema.TelephoneData.Builder newBuilder() {
    return new com.iot.data.schema.TelephoneData.Builder();
  }

  /**
   * Creates a new TelephoneData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TelephoneData RecordBuilder
   */
  public static com.iot.data.schema.TelephoneData.Builder newBuilder(com.iot.data.schema.TelephoneData.Builder other) {
    return new com.iot.data.schema.TelephoneData.Builder(other);
  }

  /**
   * Creates a new TelephoneData RecordBuilder by copying an existing TelephoneData instance.
   * @param other The existing instance to copy.
   * @return A new TelephoneData RecordBuilder
   */
  public static com.iot.data.schema.TelephoneData.Builder newBuilder(com.iot.data.schema.TelephoneData other) {
    return new com.iot.data.schema.TelephoneData.Builder(other);
  }

  /**
   * RecordBuilder for TelephoneData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TelephoneData>
    implements org.apache.avro.data.RecordBuilder<TelephoneData> {

    private java.lang.String phoneCarrier;
    private java.lang.String phoneRadio;
    private java.lang.Boolean inRoaming;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.TelephoneData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.phoneCarrier)) {
        this.phoneCarrier = data().deepCopy(fields()[0].schema(), other.phoneCarrier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phoneRadio)) {
        this.phoneRadio = data().deepCopy(fields()[1].schema(), other.phoneRadio);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.inRoaming)) {
        this.inRoaming = data().deepCopy(fields()[2].schema(), other.inRoaming);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TelephoneData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.TelephoneData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.phoneCarrier)) {
        this.phoneCarrier = data().deepCopy(fields()[0].schema(), other.phoneCarrier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phoneRadio)) {
        this.phoneRadio = data().deepCopy(fields()[1].schema(), other.phoneRadio);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.inRoaming)) {
        this.inRoaming = data().deepCopy(fields()[2].schema(), other.inRoaming);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'phoneCarrier' field.
      * @return The value.
      */
    public java.lang.String getPhoneCarrier() {
      return phoneCarrier;
    }

    /**
      * Sets the value of the 'phoneCarrier' field.
      * @param value The value of 'phoneCarrier'.
      * @return This builder.
      */
    public com.iot.data.schema.TelephoneData.Builder setPhoneCarrier(java.lang.String value) {
      validate(fields()[0], value);
      this.phoneCarrier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneCarrier' field has been set.
      * @return True if the 'phoneCarrier' field has been set, false otherwise.
      */
    public boolean hasPhoneCarrier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'phoneCarrier' field.
      * @return This builder.
      */
    public com.iot.data.schema.TelephoneData.Builder clearPhoneCarrier() {
      phoneCarrier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneRadio' field.
      * @return The value.
      */
    public java.lang.String getPhoneRadio() {
      return phoneRadio;
    }

    /**
      * Sets the value of the 'phoneRadio' field.
      * @param value The value of 'phoneRadio'.
      * @return This builder.
      */
    public com.iot.data.schema.TelephoneData.Builder setPhoneRadio(java.lang.String value) {
      validate(fields()[1], value);
      this.phoneRadio = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneRadio' field has been set.
      * @return True if the 'phoneRadio' field has been set, false otherwise.
      */
    public boolean hasPhoneRadio() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'phoneRadio' field.
      * @return This builder.
      */
    public com.iot.data.schema.TelephoneData.Builder clearPhoneRadio() {
      phoneRadio = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'inRoaming' field.
      * @return The value.
      */
    public java.lang.Boolean getInRoaming() {
      return inRoaming;
    }

    /**
      * Sets the value of the 'inRoaming' field.
      * @param value The value of 'inRoaming'.
      * @return This builder.
      */
    public com.iot.data.schema.TelephoneData.Builder setInRoaming(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.inRoaming = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'inRoaming' field has been set.
      * @return True if the 'inRoaming' field has been set, false otherwise.
      */
    public boolean hasInRoaming() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'inRoaming' field.
      * @return This builder.
      */
    public com.iot.data.schema.TelephoneData.Builder clearInRoaming() {
      inRoaming = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TelephoneData build() {
      try {
        TelephoneData record = new TelephoneData();
        record.phoneCarrier = fieldSetFlags()[0] ? this.phoneCarrier : (java.lang.String) defaultValue(fields()[0]);
        record.phoneRadio = fieldSetFlags()[1] ? this.phoneRadio : (java.lang.String) defaultValue(fields()[1]);
        record.inRoaming = fieldSetFlags()[2] ? this.inRoaming : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
