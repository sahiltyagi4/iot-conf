/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CpuInfoData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7733023500461551487L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CpuInfoData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"cpuTotal\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cpuIdle\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"cpuUsage\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String cpuTotal;
  @Deprecated public java.lang.String cpuIdle;
  @Deprecated public java.lang.Long cpuUsage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CpuInfoData() {}

  /**
   * All-args constructor.
   * @param cpuTotal The new value for cpuTotal
   * @param cpuIdle The new value for cpuIdle
   * @param cpuUsage The new value for cpuUsage
   */
  public CpuInfoData(java.lang.String cpuTotal, java.lang.String cpuIdle, java.lang.Long cpuUsage) {
    this.cpuTotal = cpuTotal;
    this.cpuIdle = cpuIdle;
    this.cpuUsage = cpuUsage;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cpuTotal;
    case 1: return cpuIdle;
    case 2: return cpuUsage;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cpuTotal = (java.lang.String)value$; break;
    case 1: cpuIdle = (java.lang.String)value$; break;
    case 2: cpuUsage = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cpuTotal' field.
   * @return The value of the 'cpuTotal' field.
   */
  public java.lang.String getCpuTotal() {
    return cpuTotal;
  }

  /**
   * Sets the value of the 'cpuTotal' field.
   * @param value the value to set.
   */
  public void setCpuTotal(java.lang.String value) {
    this.cpuTotal = value;
  }

  /**
   * Gets the value of the 'cpuIdle' field.
   * @return The value of the 'cpuIdle' field.
   */
  public java.lang.String getCpuIdle() {
    return cpuIdle;
  }

  /**
   * Sets the value of the 'cpuIdle' field.
   * @param value the value to set.
   */
  public void setCpuIdle(java.lang.String value) {
    this.cpuIdle = value;
  }

  /**
   * Gets the value of the 'cpuUsage' field.
   * @return The value of the 'cpuUsage' field.
   */
  public java.lang.Long getCpuUsage() {
    return cpuUsage;
  }

  /**
   * Sets the value of the 'cpuUsage' field.
   * @param value the value to set.
   */
  public void setCpuUsage(java.lang.Long value) {
    this.cpuUsage = value;
  }

  /**
   * Creates a new CpuInfoData RecordBuilder.
   * @return A new CpuInfoData RecordBuilder
   */
  public static com.iot.data.schema.CpuInfoData.Builder newBuilder() {
    return new com.iot.data.schema.CpuInfoData.Builder();
  }

  /**
   * Creates a new CpuInfoData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CpuInfoData RecordBuilder
   */
  public static com.iot.data.schema.CpuInfoData.Builder newBuilder(com.iot.data.schema.CpuInfoData.Builder other) {
    return new com.iot.data.schema.CpuInfoData.Builder(other);
  }

  /**
   * Creates a new CpuInfoData RecordBuilder by copying an existing CpuInfoData instance.
   * @param other The existing instance to copy.
   * @return A new CpuInfoData RecordBuilder
   */
  public static com.iot.data.schema.CpuInfoData.Builder newBuilder(com.iot.data.schema.CpuInfoData other) {
    return new com.iot.data.schema.CpuInfoData.Builder(other);
  }

  /**
   * RecordBuilder for CpuInfoData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CpuInfoData>
    implements org.apache.avro.data.RecordBuilder<CpuInfoData> {

    private java.lang.String cpuTotal;
    private java.lang.String cpuIdle;
    private java.lang.Long cpuUsage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.CpuInfoData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cpuTotal)) {
        this.cpuTotal = data().deepCopy(fields()[0].schema(), other.cpuTotal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cpuIdle)) {
        this.cpuIdle = data().deepCopy(fields()[1].schema(), other.cpuIdle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cpuUsage)) {
        this.cpuUsage = data().deepCopy(fields()[2].schema(), other.cpuUsage);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CpuInfoData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.CpuInfoData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cpuTotal)) {
        this.cpuTotal = data().deepCopy(fields()[0].schema(), other.cpuTotal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.cpuIdle)) {
        this.cpuIdle = data().deepCopy(fields()[1].schema(), other.cpuIdle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cpuUsage)) {
        this.cpuUsage = data().deepCopy(fields()[2].schema(), other.cpuUsage);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'cpuTotal' field.
      * @return The value.
      */
    public java.lang.String getCpuTotal() {
      return cpuTotal;
    }

    /**
      * Sets the value of the 'cpuTotal' field.
      * @param value The value of 'cpuTotal'.
      * @return This builder.
      */
    public com.iot.data.schema.CpuInfoData.Builder setCpuTotal(java.lang.String value) {
      validate(fields()[0], value);
      this.cpuTotal = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cpuTotal' field has been set.
      * @return True if the 'cpuTotal' field has been set, false otherwise.
      */
    public boolean hasCpuTotal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cpuTotal' field.
      * @return This builder.
      */
    public com.iot.data.schema.CpuInfoData.Builder clearCpuTotal() {
      cpuTotal = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'cpuIdle' field.
      * @return The value.
      */
    public java.lang.String getCpuIdle() {
      return cpuIdle;
    }

    /**
      * Sets the value of the 'cpuIdle' field.
      * @param value The value of 'cpuIdle'.
      * @return This builder.
      */
    public com.iot.data.schema.CpuInfoData.Builder setCpuIdle(java.lang.String value) {
      validate(fields()[1], value);
      this.cpuIdle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'cpuIdle' field has been set.
      * @return True if the 'cpuIdle' field has been set, false otherwise.
      */
    public boolean hasCpuIdle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'cpuIdle' field.
      * @return This builder.
      */
    public com.iot.data.schema.CpuInfoData.Builder clearCpuIdle() {
      cpuIdle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cpuUsage' field.
      * @return The value.
      */
    public java.lang.Long getCpuUsage() {
      return cpuUsage;
    }

    /**
      * Sets the value of the 'cpuUsage' field.
      * @param value The value of 'cpuUsage'.
      * @return This builder.
      */
    public com.iot.data.schema.CpuInfoData.Builder setCpuUsage(java.lang.Long value) {
      validate(fields()[2], value);
      this.cpuUsage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cpuUsage' field has been set.
      * @return True if the 'cpuUsage' field has been set, false otherwise.
      */
    public boolean hasCpuUsage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cpuUsage' field.
      * @return This builder.
      */
    public com.iot.data.schema.CpuInfoData.Builder clearCpuUsage() {
      cpuUsage = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CpuInfoData build() {
      try {
        CpuInfoData record = new CpuInfoData();
        record.cpuTotal = fieldSetFlags()[0] ? this.cpuTotal : (java.lang.String) defaultValue(fields()[0]);
        record.cpuIdle = fieldSetFlags()[1] ? this.cpuIdle : (java.lang.String) defaultValue(fields()[1]);
        record.cpuUsage = fieldSetFlags()[2] ? this.cpuUsage : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
