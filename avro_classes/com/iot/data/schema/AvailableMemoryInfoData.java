/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvailableMemoryInfoData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1046373702240096166L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvailableMemoryInfoData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"availableRAM\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"availableStorage\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Long availableRAM;
  @Deprecated public java.lang.Double availableStorage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvailableMemoryInfoData() {}

  /**
   * All-args constructor.
   * @param availableRAM The new value for availableRAM
   * @param availableStorage The new value for availableStorage
   */
  public AvailableMemoryInfoData(java.lang.Long availableRAM, java.lang.Double availableStorage) {
    this.availableRAM = availableRAM;
    this.availableStorage = availableStorage;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return availableRAM;
    case 1: return availableStorage;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: availableRAM = (java.lang.Long)value$; break;
    case 1: availableStorage = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'availableRAM' field.
   * @return The value of the 'availableRAM' field.
   */
  public java.lang.Long getAvailableRAM() {
    return availableRAM;
  }

  /**
   * Sets the value of the 'availableRAM' field.
   * @param value the value to set.
   */
  public void setAvailableRAM(java.lang.Long value) {
    this.availableRAM = value;
  }

  /**
   * Gets the value of the 'availableStorage' field.
   * @return The value of the 'availableStorage' field.
   */
  public java.lang.Double getAvailableStorage() {
    return availableStorage;
  }

  /**
   * Sets the value of the 'availableStorage' field.
   * @param value the value to set.
   */
  public void setAvailableStorage(java.lang.Double value) {
    this.availableStorage = value;
  }

  /**
   * Creates a new AvailableMemoryInfoData RecordBuilder.
   * @return A new AvailableMemoryInfoData RecordBuilder
   */
  public static com.iot.data.schema.AvailableMemoryInfoData.Builder newBuilder() {
    return new com.iot.data.schema.AvailableMemoryInfoData.Builder();
  }

  /**
   * Creates a new AvailableMemoryInfoData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvailableMemoryInfoData RecordBuilder
   */
  public static com.iot.data.schema.AvailableMemoryInfoData.Builder newBuilder(com.iot.data.schema.AvailableMemoryInfoData.Builder other) {
    return new com.iot.data.schema.AvailableMemoryInfoData.Builder(other);
  }

  /**
   * Creates a new AvailableMemoryInfoData RecordBuilder by copying an existing AvailableMemoryInfoData instance.
   * @param other The existing instance to copy.
   * @return A new AvailableMemoryInfoData RecordBuilder
   */
  public static com.iot.data.schema.AvailableMemoryInfoData.Builder newBuilder(com.iot.data.schema.AvailableMemoryInfoData other) {
    return new com.iot.data.schema.AvailableMemoryInfoData.Builder(other);
  }

  /**
   * RecordBuilder for AvailableMemoryInfoData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvailableMemoryInfoData>
    implements org.apache.avro.data.RecordBuilder<AvailableMemoryInfoData> {

    private java.lang.Long availableRAM;
    private java.lang.Double availableStorage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.AvailableMemoryInfoData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.availableRAM)) {
        this.availableRAM = data().deepCopy(fields()[0].schema(), other.availableRAM);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.availableStorage)) {
        this.availableStorage = data().deepCopy(fields()[1].schema(), other.availableStorage);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvailableMemoryInfoData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.AvailableMemoryInfoData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.availableRAM)) {
        this.availableRAM = data().deepCopy(fields()[0].schema(), other.availableRAM);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.availableStorage)) {
        this.availableStorage = data().deepCopy(fields()[1].schema(), other.availableStorage);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'availableRAM' field.
      * @return The value.
      */
    public java.lang.Long getAvailableRAM() {
      return availableRAM;
    }

    /**
      * Sets the value of the 'availableRAM' field.
      * @param value The value of 'availableRAM'.
      * @return This builder.
      */
    public com.iot.data.schema.AvailableMemoryInfoData.Builder setAvailableRAM(java.lang.Long value) {
      validate(fields()[0], value);
      this.availableRAM = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'availableRAM' field has been set.
      * @return True if the 'availableRAM' field has been set, false otherwise.
      */
    public boolean hasAvailableRAM() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'availableRAM' field.
      * @return This builder.
      */
    public com.iot.data.schema.AvailableMemoryInfoData.Builder clearAvailableRAM() {
      availableRAM = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'availableStorage' field.
      * @return The value.
      */
    public java.lang.Double getAvailableStorage() {
      return availableStorage;
    }

    /**
      * Sets the value of the 'availableStorage' field.
      * @param value The value of 'availableStorage'.
      * @return This builder.
      */
    public com.iot.data.schema.AvailableMemoryInfoData.Builder setAvailableStorage(java.lang.Double value) {
      validate(fields()[1], value);
      this.availableStorage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'availableStorage' field has been set.
      * @return True if the 'availableStorage' field has been set, false otherwise.
      */
    public boolean hasAvailableStorage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'availableStorage' field.
      * @return This builder.
      */
    public com.iot.data.schema.AvailableMemoryInfoData.Builder clearAvailableStorage() {
      availableStorage = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AvailableMemoryInfoData build() {
      try {
        AvailableMemoryInfoData record = new AvailableMemoryInfoData();
        record.availableRAM = fieldSetFlags()[0] ? this.availableRAM : (java.lang.Long) defaultValue(fields()[0]);
        record.availableStorage = fieldSetFlags()[1] ? this.availableStorage : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
