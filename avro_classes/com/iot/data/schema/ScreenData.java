/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ScreenData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5472204400240270593L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ScreenData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"screenId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"appSessionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"action\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"sessionId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String screenId;
  @Deprecated public java.lang.String appSessionId;
  @Deprecated public java.lang.String timestamp;
  @Deprecated public java.lang.String action;
  @Deprecated public java.lang.String sessionId;
  @Deprecated public java.util.Map<java.lang.String,java.lang.String> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ScreenData() {}

  /**
   * All-args constructor.
   * @param screenId The new value for screenId
   * @param appSessionId The new value for appSessionId
   * @param timestamp The new value for timestamp
   * @param action The new value for action
   * @param sessionId The new value for sessionId
   * @param properties The new value for properties
   */
  public ScreenData(java.lang.String screenId, java.lang.String appSessionId, java.lang.String timestamp, java.lang.String action, java.lang.String sessionId, java.util.Map<java.lang.String,java.lang.String> properties) {
    this.screenId = screenId;
    this.appSessionId = appSessionId;
    this.timestamp = timestamp;
    this.action = action;
    this.sessionId = sessionId;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return screenId;
    case 1: return appSessionId;
    case 2: return timestamp;
    case 3: return action;
    case 4: return sessionId;
    case 5: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: screenId = (java.lang.String)value$; break;
    case 1: appSessionId = (java.lang.String)value$; break;
    case 2: timestamp = (java.lang.String)value$; break;
    case 3: action = (java.lang.String)value$; break;
    case 4: sessionId = (java.lang.String)value$; break;
    case 5: properties = (java.util.Map<java.lang.String,java.lang.String>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'screenId' field.
   * @return The value of the 'screenId' field.
   */
  public java.lang.String getScreenId() {
    return screenId;
  }

  /**
   * Sets the value of the 'screenId' field.
   * @param value the value to set.
   */
  public void setScreenId(java.lang.String value) {
    this.screenId = value;
  }

  /**
   * Gets the value of the 'appSessionId' field.
   * @return The value of the 'appSessionId' field.
   */
  public java.lang.String getAppSessionId() {
    return appSessionId;
  }

  /**
   * Sets the value of the 'appSessionId' field.
   * @param value the value to set.
   */
  public void setAppSessionId(java.lang.String value) {
    this.appSessionId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.String getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.String value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public java.lang.String getAction() {
    return action;
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(java.lang.String value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'sessionId' field.
   * @return The value of the 'sessionId' field.
   */
  public java.lang.String getSessionId() {
    return sessionId;
  }

  /**
   * Sets the value of the 'sessionId' field.
   * @param value the value to set.
   */
  public void setSessionId(java.lang.String value) {
    this.sessionId = value;
  }

  /**
   * Gets the value of the 'properties' field.
   * @return The value of the 'properties' field.
   */
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * @param value the value to set.
   */
  public void setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
    this.properties = value;
  }

  /**
   * Creates a new ScreenData RecordBuilder.
   * @return A new ScreenData RecordBuilder
   */
  public static com.iot.data.schema.ScreenData.Builder newBuilder() {
    return new com.iot.data.schema.ScreenData.Builder();
  }

  /**
   * Creates a new ScreenData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ScreenData RecordBuilder
   */
  public static com.iot.data.schema.ScreenData.Builder newBuilder(com.iot.data.schema.ScreenData.Builder other) {
    return new com.iot.data.schema.ScreenData.Builder(other);
  }

  /**
   * Creates a new ScreenData RecordBuilder by copying an existing ScreenData instance.
   * @param other The existing instance to copy.
   * @return A new ScreenData RecordBuilder
   */
  public static com.iot.data.schema.ScreenData.Builder newBuilder(com.iot.data.schema.ScreenData other) {
    return new com.iot.data.schema.ScreenData.Builder(other);
  }

  /**
   * RecordBuilder for ScreenData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ScreenData>
    implements org.apache.avro.data.RecordBuilder<ScreenData> {

    private java.lang.String screenId;
    private java.lang.String appSessionId;
    private java.lang.String timestamp;
    private java.lang.String action;
    private java.lang.String sessionId;
    private java.util.Map<java.lang.String,java.lang.String> properties;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.ScreenData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.screenId)) {
        this.screenId = data().deepCopy(fields()[0].schema(), other.screenId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appSessionId)) {
        this.appSessionId = data().deepCopy(fields()[1].schema(), other.appSessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.action)) {
        this.action = data().deepCopy(fields()[3].schema(), other.action);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[4].schema(), other.sessionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.properties)) {
        this.properties = data().deepCopy(fields()[5].schema(), other.properties);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ScreenData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.ScreenData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.screenId)) {
        this.screenId = data().deepCopy(fields()[0].schema(), other.screenId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appSessionId)) {
        this.appSessionId = data().deepCopy(fields()[1].schema(), other.appSessionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.action)) {
        this.action = data().deepCopy(fields()[3].schema(), other.action);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sessionId)) {
        this.sessionId = data().deepCopy(fields()[4].schema(), other.sessionId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.properties)) {
        this.properties = data().deepCopy(fields()[5].schema(), other.properties);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'screenId' field.
      * @return The value.
      */
    public java.lang.String getScreenId() {
      return screenId;
    }

    /**
      * Sets the value of the 'screenId' field.
      * @param value The value of 'screenId'.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder setScreenId(java.lang.String value) {
      validate(fields()[0], value);
      this.screenId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'screenId' field has been set.
      * @return True if the 'screenId' field has been set, false otherwise.
      */
    public boolean hasScreenId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'screenId' field.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder clearScreenId() {
      screenId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'appSessionId' field.
      * @return The value.
      */
    public java.lang.String getAppSessionId() {
      return appSessionId;
    }

    /**
      * Sets the value of the 'appSessionId' field.
      * @param value The value of 'appSessionId'.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder setAppSessionId(java.lang.String value) {
      validate(fields()[1], value);
      this.appSessionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'appSessionId' field has been set.
      * @return True if the 'appSessionId' field has been set, false otherwise.
      */
    public boolean hasAppSessionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'appSessionId' field.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder clearAppSessionId() {
      appSessionId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.String getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder setTimestamp(java.lang.String value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public java.lang.String getAction() {
      return action;
    }

    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder setAction(java.lang.String value) {
      validate(fields()[3], value);
      this.action = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder clearAction() {
      action = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionId' field.
      * @return The value.
      */
    public java.lang.String getSessionId() {
      return sessionId;
    }

    /**
      * Sets the value of the 'sessionId' field.
      * @param value The value of 'sessionId'.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder setSessionId(java.lang.String value) {
      validate(fields()[4], value);
      this.sessionId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionId' field has been set.
      * @return True if the 'sessionId' field has been set, false otherwise.
      */
    public boolean hasSessionId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sessionId' field.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder clearSessionId() {
      sessionId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'properties' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,java.lang.String> getProperties() {
      return properties;
    }

    /**
      * Sets the value of the 'properties' field.
      * @param value The value of 'properties'.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder setProperties(java.util.Map<java.lang.String,java.lang.String> value) {
      validate(fields()[5], value);
      this.properties = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'properties' field has been set.
      * @return True if the 'properties' field has been set, false otherwise.
      */
    public boolean hasProperties() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'properties' field.
      * @return This builder.
      */
    public com.iot.data.schema.ScreenData.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public ScreenData build() {
      try {
        ScreenData record = new ScreenData();
        record.screenId = fieldSetFlags()[0] ? this.screenId : (java.lang.String) defaultValue(fields()[0]);
        record.appSessionId = fieldSetFlags()[1] ? this.appSessionId : (java.lang.String) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.String) defaultValue(fields()[2]);
        record.action = fieldSetFlags()[3] ? this.action : (java.lang.String) defaultValue(fields()[3]);
        record.sessionId = fieldSetFlags()[4] ? this.sessionId : (java.lang.String) defaultValue(fields()[4]);
        record.properties = fieldSetFlags()[5] ? this.properties : (java.util.Map<java.lang.String,java.lang.String>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
