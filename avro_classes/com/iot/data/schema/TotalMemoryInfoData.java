/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TotalMemoryInfoData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1096572410717210373L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TotalMemoryInfoData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"totalRAM\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"totalStorage\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Long totalRAM;
  @Deprecated public java.lang.Double totalStorage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TotalMemoryInfoData() {}

  /**
   * All-args constructor.
   * @param totalRAM The new value for totalRAM
   * @param totalStorage The new value for totalStorage
   */
  public TotalMemoryInfoData(java.lang.Long totalRAM, java.lang.Double totalStorage) {
    this.totalRAM = totalRAM;
    this.totalStorage = totalStorage;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return totalRAM;
    case 1: return totalStorage;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: totalRAM = (java.lang.Long)value$; break;
    case 1: totalStorage = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'totalRAM' field.
   * @return The value of the 'totalRAM' field.
   */
  public java.lang.Long getTotalRAM() {
    return totalRAM;
  }

  /**
   * Sets the value of the 'totalRAM' field.
   * @param value the value to set.
   */
  public void setTotalRAM(java.lang.Long value) {
    this.totalRAM = value;
  }

  /**
   * Gets the value of the 'totalStorage' field.
   * @return The value of the 'totalStorage' field.
   */
  public java.lang.Double getTotalStorage() {
    return totalStorage;
  }

  /**
   * Sets the value of the 'totalStorage' field.
   * @param value the value to set.
   */
  public void setTotalStorage(java.lang.Double value) {
    this.totalStorage = value;
  }

  /**
   * Creates a new TotalMemoryInfoData RecordBuilder.
   * @return A new TotalMemoryInfoData RecordBuilder
   */
  public static com.iot.data.schema.TotalMemoryInfoData.Builder newBuilder() {
    return new com.iot.data.schema.TotalMemoryInfoData.Builder();
  }

  /**
   * Creates a new TotalMemoryInfoData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TotalMemoryInfoData RecordBuilder
   */
  public static com.iot.data.schema.TotalMemoryInfoData.Builder newBuilder(com.iot.data.schema.TotalMemoryInfoData.Builder other) {
    return new com.iot.data.schema.TotalMemoryInfoData.Builder(other);
  }

  /**
   * Creates a new TotalMemoryInfoData RecordBuilder by copying an existing TotalMemoryInfoData instance.
   * @param other The existing instance to copy.
   * @return A new TotalMemoryInfoData RecordBuilder
   */
  public static com.iot.data.schema.TotalMemoryInfoData.Builder newBuilder(com.iot.data.schema.TotalMemoryInfoData other) {
    return new com.iot.data.schema.TotalMemoryInfoData.Builder(other);
  }

  /**
   * RecordBuilder for TotalMemoryInfoData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TotalMemoryInfoData>
    implements org.apache.avro.data.RecordBuilder<TotalMemoryInfoData> {

    private java.lang.Long totalRAM;
    private java.lang.Double totalStorage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.TotalMemoryInfoData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.totalRAM)) {
        this.totalRAM = data().deepCopy(fields()[0].schema(), other.totalRAM);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalStorage)) {
        this.totalStorage = data().deepCopy(fields()[1].schema(), other.totalStorage);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TotalMemoryInfoData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.TotalMemoryInfoData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.totalRAM)) {
        this.totalRAM = data().deepCopy(fields()[0].schema(), other.totalRAM);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalStorage)) {
        this.totalStorage = data().deepCopy(fields()[1].schema(), other.totalStorage);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'totalRAM' field.
      * @return The value.
      */
    public java.lang.Long getTotalRAM() {
      return totalRAM;
    }

    /**
      * Sets the value of the 'totalRAM' field.
      * @param value The value of 'totalRAM'.
      * @return This builder.
      */
    public com.iot.data.schema.TotalMemoryInfoData.Builder setTotalRAM(java.lang.Long value) {
      validate(fields()[0], value);
      this.totalRAM = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'totalRAM' field has been set.
      * @return True if the 'totalRAM' field has been set, false otherwise.
      */
    public boolean hasTotalRAM() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'totalRAM' field.
      * @return This builder.
      */
    public com.iot.data.schema.TotalMemoryInfoData.Builder clearTotalRAM() {
      totalRAM = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalStorage' field.
      * @return The value.
      */
    public java.lang.Double getTotalStorage() {
      return totalStorage;
    }

    /**
      * Sets the value of the 'totalStorage' field.
      * @param value The value of 'totalStorage'.
      * @return This builder.
      */
    public com.iot.data.schema.TotalMemoryInfoData.Builder setTotalStorage(java.lang.Double value) {
      validate(fields()[1], value);
      this.totalStorage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'totalStorage' field has been set.
      * @return True if the 'totalStorage' field has been set, false otherwise.
      */
    public boolean hasTotalStorage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'totalStorage' field.
      * @return This builder.
      */
    public com.iot.data.schema.TotalMemoryInfoData.Builder clearTotalStorage() {
      totalStorage = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public TotalMemoryInfoData build() {
      try {
        TotalMemoryInfoData record = new TotalMemoryInfoData();
        record.totalRAM = fieldSetFlags()[0] ? this.totalRAM : (java.lang.Long) defaultValue(fields()[0]);
        record.totalStorage = fieldSetFlags()[1] ? this.totalStorage : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
