/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeviceData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5472706235370859851L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeviceData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"sdkVersion\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"releaseVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceBrand\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceManufacturer\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceModel\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceBoard\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"deviceProduct\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Long sdkVersion;
  @Deprecated public java.lang.String releaseVersion;
  @Deprecated public java.lang.String deviceBrand;
  @Deprecated public java.lang.String deviceManufacturer;
  @Deprecated public java.lang.String deviceModel;
  @Deprecated public java.lang.String deviceBoard;
  @Deprecated public java.lang.String deviceProduct;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeviceData() {}

  /**
   * All-args constructor.
   * @param sdkVersion The new value for sdkVersion
   * @param releaseVersion The new value for releaseVersion
   * @param deviceBrand The new value for deviceBrand
   * @param deviceManufacturer The new value for deviceManufacturer
   * @param deviceModel The new value for deviceModel
   * @param deviceBoard The new value for deviceBoard
   * @param deviceProduct The new value for deviceProduct
   */
  public DeviceData(java.lang.Long sdkVersion, java.lang.String releaseVersion, java.lang.String deviceBrand, java.lang.String deviceManufacturer, java.lang.String deviceModel, java.lang.String deviceBoard, java.lang.String deviceProduct) {
    this.sdkVersion = sdkVersion;
    this.releaseVersion = releaseVersion;
    this.deviceBrand = deviceBrand;
    this.deviceManufacturer = deviceManufacturer;
    this.deviceModel = deviceModel;
    this.deviceBoard = deviceBoard;
    this.deviceProduct = deviceProduct;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sdkVersion;
    case 1: return releaseVersion;
    case 2: return deviceBrand;
    case 3: return deviceManufacturer;
    case 4: return deviceModel;
    case 5: return deviceBoard;
    case 6: return deviceProduct;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sdkVersion = (java.lang.Long)value$; break;
    case 1: releaseVersion = (java.lang.String)value$; break;
    case 2: deviceBrand = (java.lang.String)value$; break;
    case 3: deviceManufacturer = (java.lang.String)value$; break;
    case 4: deviceModel = (java.lang.String)value$; break;
    case 5: deviceBoard = (java.lang.String)value$; break;
    case 6: deviceProduct = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sdkVersion' field.
   * @return The value of the 'sdkVersion' field.
   */
  public java.lang.Long getSdkVersion() {
    return sdkVersion;
  }

  /**
   * Sets the value of the 'sdkVersion' field.
   * @param value the value to set.
   */
  public void setSdkVersion(java.lang.Long value) {
    this.sdkVersion = value;
  }

  /**
   * Gets the value of the 'releaseVersion' field.
   * @return The value of the 'releaseVersion' field.
   */
  public java.lang.String getReleaseVersion() {
    return releaseVersion;
  }

  /**
   * Sets the value of the 'releaseVersion' field.
   * @param value the value to set.
   */
  public void setReleaseVersion(java.lang.String value) {
    this.releaseVersion = value;
  }

  /**
   * Gets the value of the 'deviceBrand' field.
   * @return The value of the 'deviceBrand' field.
   */
  public java.lang.String getDeviceBrand() {
    return deviceBrand;
  }

  /**
   * Sets the value of the 'deviceBrand' field.
   * @param value the value to set.
   */
  public void setDeviceBrand(java.lang.String value) {
    this.deviceBrand = value;
  }

  /**
   * Gets the value of the 'deviceManufacturer' field.
   * @return The value of the 'deviceManufacturer' field.
   */
  public java.lang.String getDeviceManufacturer() {
    return deviceManufacturer;
  }

  /**
   * Sets the value of the 'deviceManufacturer' field.
   * @param value the value to set.
   */
  public void setDeviceManufacturer(java.lang.String value) {
    this.deviceManufacturer = value;
  }

  /**
   * Gets the value of the 'deviceModel' field.
   * @return The value of the 'deviceModel' field.
   */
  public java.lang.String getDeviceModel() {
    return deviceModel;
  }

  /**
   * Sets the value of the 'deviceModel' field.
   * @param value the value to set.
   */
  public void setDeviceModel(java.lang.String value) {
    this.deviceModel = value;
  }

  /**
   * Gets the value of the 'deviceBoard' field.
   * @return The value of the 'deviceBoard' field.
   */
  public java.lang.String getDeviceBoard() {
    return deviceBoard;
  }

  /**
   * Sets the value of the 'deviceBoard' field.
   * @param value the value to set.
   */
  public void setDeviceBoard(java.lang.String value) {
    this.deviceBoard = value;
  }

  /**
   * Gets the value of the 'deviceProduct' field.
   * @return The value of the 'deviceProduct' field.
   */
  public java.lang.String getDeviceProduct() {
    return deviceProduct;
  }

  /**
   * Sets the value of the 'deviceProduct' field.
   * @param value the value to set.
   */
  public void setDeviceProduct(java.lang.String value) {
    this.deviceProduct = value;
  }

  /**
   * Creates a new DeviceData RecordBuilder.
   * @return A new DeviceData RecordBuilder
   */
  public static com.iot.data.schema.DeviceData.Builder newBuilder() {
    return new com.iot.data.schema.DeviceData.Builder();
  }

  /**
   * Creates a new DeviceData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeviceData RecordBuilder
   */
  public static com.iot.data.schema.DeviceData.Builder newBuilder(com.iot.data.schema.DeviceData.Builder other) {
    return new com.iot.data.schema.DeviceData.Builder(other);
  }

  /**
   * Creates a new DeviceData RecordBuilder by copying an existing DeviceData instance.
   * @param other The existing instance to copy.
   * @return A new DeviceData RecordBuilder
   */
  public static com.iot.data.schema.DeviceData.Builder newBuilder(com.iot.data.schema.DeviceData other) {
    return new com.iot.data.schema.DeviceData.Builder(other);
  }

  /**
   * RecordBuilder for DeviceData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeviceData>
    implements org.apache.avro.data.RecordBuilder<DeviceData> {

    private java.lang.Long sdkVersion;
    private java.lang.String releaseVersion;
    private java.lang.String deviceBrand;
    private java.lang.String deviceManufacturer;
    private java.lang.String deviceModel;
    private java.lang.String deviceBoard;
    private java.lang.String deviceProduct;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.DeviceData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sdkVersion)) {
        this.sdkVersion = data().deepCopy(fields()[0].schema(), other.sdkVersion);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.releaseVersion)) {
        this.releaseVersion = data().deepCopy(fields()[1].schema(), other.releaseVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deviceBrand)) {
        this.deviceBrand = data().deepCopy(fields()[2].schema(), other.deviceBrand);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deviceManufacturer)) {
        this.deviceManufacturer = data().deepCopy(fields()[3].schema(), other.deviceManufacturer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.deviceModel)) {
        this.deviceModel = data().deepCopy(fields()[4].schema(), other.deviceModel);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deviceBoard)) {
        this.deviceBoard = data().deepCopy(fields()[5].schema(), other.deviceBoard);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.deviceProduct)) {
        this.deviceProduct = data().deepCopy(fields()[6].schema(), other.deviceProduct);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DeviceData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.DeviceData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sdkVersion)) {
        this.sdkVersion = data().deepCopy(fields()[0].schema(), other.sdkVersion);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.releaseVersion)) {
        this.releaseVersion = data().deepCopy(fields()[1].schema(), other.releaseVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deviceBrand)) {
        this.deviceBrand = data().deepCopy(fields()[2].schema(), other.deviceBrand);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.deviceManufacturer)) {
        this.deviceManufacturer = data().deepCopy(fields()[3].schema(), other.deviceManufacturer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.deviceModel)) {
        this.deviceModel = data().deepCopy(fields()[4].schema(), other.deviceModel);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deviceBoard)) {
        this.deviceBoard = data().deepCopy(fields()[5].schema(), other.deviceBoard);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.deviceProduct)) {
        this.deviceProduct = data().deepCopy(fields()[6].schema(), other.deviceProduct);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'sdkVersion' field.
      * @return The value.
      */
    public java.lang.Long getSdkVersion() {
      return sdkVersion;
    }

    /**
      * Sets the value of the 'sdkVersion' field.
      * @param value The value of 'sdkVersion'.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder setSdkVersion(java.lang.Long value) {
      validate(fields()[0], value);
      this.sdkVersion = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sdkVersion' field has been set.
      * @return True if the 'sdkVersion' field has been set, false otherwise.
      */
    public boolean hasSdkVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sdkVersion' field.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder clearSdkVersion() {
      sdkVersion = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'releaseVersion' field.
      * @return The value.
      */
    public java.lang.String getReleaseVersion() {
      return releaseVersion;
    }

    /**
      * Sets the value of the 'releaseVersion' field.
      * @param value The value of 'releaseVersion'.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder setReleaseVersion(java.lang.String value) {
      validate(fields()[1], value);
      this.releaseVersion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'releaseVersion' field has been set.
      * @return True if the 'releaseVersion' field has been set, false otherwise.
      */
    public boolean hasReleaseVersion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'releaseVersion' field.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder clearReleaseVersion() {
      releaseVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceBrand' field.
      * @return The value.
      */
    public java.lang.String getDeviceBrand() {
      return deviceBrand;
    }

    /**
      * Sets the value of the 'deviceBrand' field.
      * @param value The value of 'deviceBrand'.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder setDeviceBrand(java.lang.String value) {
      validate(fields()[2], value);
      this.deviceBrand = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceBrand' field has been set.
      * @return True if the 'deviceBrand' field has been set, false otherwise.
      */
    public boolean hasDeviceBrand() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'deviceBrand' field.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder clearDeviceBrand() {
      deviceBrand = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceManufacturer' field.
      * @return The value.
      */
    public java.lang.String getDeviceManufacturer() {
      return deviceManufacturer;
    }

    /**
      * Sets the value of the 'deviceManufacturer' field.
      * @param value The value of 'deviceManufacturer'.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder setDeviceManufacturer(java.lang.String value) {
      validate(fields()[3], value);
      this.deviceManufacturer = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceManufacturer' field has been set.
      * @return True if the 'deviceManufacturer' field has been set, false otherwise.
      */
    public boolean hasDeviceManufacturer() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'deviceManufacturer' field.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder clearDeviceManufacturer() {
      deviceManufacturer = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceModel' field.
      * @return The value.
      */
    public java.lang.String getDeviceModel() {
      return deviceModel;
    }

    /**
      * Sets the value of the 'deviceModel' field.
      * @param value The value of 'deviceModel'.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder setDeviceModel(java.lang.String value) {
      validate(fields()[4], value);
      this.deviceModel = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceModel' field has been set.
      * @return True if the 'deviceModel' field has been set, false otherwise.
      */
    public boolean hasDeviceModel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'deviceModel' field.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder clearDeviceModel() {
      deviceModel = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceBoard' field.
      * @return The value.
      */
    public java.lang.String getDeviceBoard() {
      return deviceBoard;
    }

    /**
      * Sets the value of the 'deviceBoard' field.
      * @param value The value of 'deviceBoard'.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder setDeviceBoard(java.lang.String value) {
      validate(fields()[5], value);
      this.deviceBoard = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceBoard' field has been set.
      * @return True if the 'deviceBoard' field has been set, false otherwise.
      */
    public boolean hasDeviceBoard() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'deviceBoard' field.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder clearDeviceBoard() {
      deviceBoard = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceProduct' field.
      * @return The value.
      */
    public java.lang.String getDeviceProduct() {
      return deviceProduct;
    }

    /**
      * Sets the value of the 'deviceProduct' field.
      * @param value The value of 'deviceProduct'.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder setDeviceProduct(java.lang.String value) {
      validate(fields()[6], value);
      this.deviceProduct = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceProduct' field has been set.
      * @return True if the 'deviceProduct' field has been set, false otherwise.
      */
    public boolean hasDeviceProduct() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'deviceProduct' field.
      * @return This builder.
      */
    public com.iot.data.schema.DeviceData.Builder clearDeviceProduct() {
      deviceProduct = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DeviceData build() {
      try {
        DeviceData record = new DeviceData();
        record.sdkVersion = fieldSetFlags()[0] ? this.sdkVersion : (java.lang.Long) defaultValue(fields()[0]);
        record.releaseVersion = fieldSetFlags()[1] ? this.releaseVersion : (java.lang.String) defaultValue(fields()[1]);
        record.deviceBrand = fieldSetFlags()[2] ? this.deviceBrand : (java.lang.String) defaultValue(fields()[2]);
        record.deviceManufacturer = fieldSetFlags()[3] ? this.deviceManufacturer : (java.lang.String) defaultValue(fields()[3]);
        record.deviceModel = fieldSetFlags()[4] ? this.deviceModel : (java.lang.String) defaultValue(fields()[4]);
        record.deviceBoard = fieldSetFlags()[5] ? this.deviceBoard : (java.lang.String) defaultValue(fields()[5]);
        record.deviceProduct = fieldSetFlags()[6] ? this.deviceProduct : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
