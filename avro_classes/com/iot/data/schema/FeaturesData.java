/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FeaturesData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4668009672131497084L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FeaturesData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"hasNFC\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasTelephony\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasGPS\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasAccelerometer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasBarometer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasCompass\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasGyroscope\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasLightsensor\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasProximity\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"bluetoothVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Boolean hasNFC;
  @Deprecated public java.lang.Boolean hasTelephony;
  @Deprecated public java.lang.Boolean hasGPS;
  @Deprecated public java.lang.Boolean hasAccelerometer;
  @Deprecated public java.lang.Boolean hasBarometer;
  @Deprecated public java.lang.Boolean hasCompass;
  @Deprecated public java.lang.Boolean hasGyroscope;
  @Deprecated public java.lang.Boolean hasLightsensor;
  @Deprecated public java.lang.Boolean hasProximity;
  @Deprecated public java.lang.String bluetoothVersion;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FeaturesData() {}

  /**
   * All-args constructor.
   * @param hasNFC The new value for hasNFC
   * @param hasTelephony The new value for hasTelephony
   * @param hasGPS The new value for hasGPS
   * @param hasAccelerometer The new value for hasAccelerometer
   * @param hasBarometer The new value for hasBarometer
   * @param hasCompass The new value for hasCompass
   * @param hasGyroscope The new value for hasGyroscope
   * @param hasLightsensor The new value for hasLightsensor
   * @param hasProximity The new value for hasProximity
   * @param bluetoothVersion The new value for bluetoothVersion
   */
  public FeaturesData(java.lang.Boolean hasNFC, java.lang.Boolean hasTelephony, java.lang.Boolean hasGPS, java.lang.Boolean hasAccelerometer, java.lang.Boolean hasBarometer, java.lang.Boolean hasCompass, java.lang.Boolean hasGyroscope, java.lang.Boolean hasLightsensor, java.lang.Boolean hasProximity, java.lang.String bluetoothVersion) {
    this.hasNFC = hasNFC;
    this.hasTelephony = hasTelephony;
    this.hasGPS = hasGPS;
    this.hasAccelerometer = hasAccelerometer;
    this.hasBarometer = hasBarometer;
    this.hasCompass = hasCompass;
    this.hasGyroscope = hasGyroscope;
    this.hasLightsensor = hasLightsensor;
    this.hasProximity = hasProximity;
    this.bluetoothVersion = bluetoothVersion;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hasNFC;
    case 1: return hasTelephony;
    case 2: return hasGPS;
    case 3: return hasAccelerometer;
    case 4: return hasBarometer;
    case 5: return hasCompass;
    case 6: return hasGyroscope;
    case 7: return hasLightsensor;
    case 8: return hasProximity;
    case 9: return bluetoothVersion;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hasNFC = (java.lang.Boolean)value$; break;
    case 1: hasTelephony = (java.lang.Boolean)value$; break;
    case 2: hasGPS = (java.lang.Boolean)value$; break;
    case 3: hasAccelerometer = (java.lang.Boolean)value$; break;
    case 4: hasBarometer = (java.lang.Boolean)value$; break;
    case 5: hasCompass = (java.lang.Boolean)value$; break;
    case 6: hasGyroscope = (java.lang.Boolean)value$; break;
    case 7: hasLightsensor = (java.lang.Boolean)value$; break;
    case 8: hasProximity = (java.lang.Boolean)value$; break;
    case 9: bluetoothVersion = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hasNFC' field.
   * @return The value of the 'hasNFC' field.
   */
  public java.lang.Boolean getHasNFC() {
    return hasNFC;
  }

  /**
   * Sets the value of the 'hasNFC' field.
   * @param value the value to set.
   */
  public void setHasNFC(java.lang.Boolean value) {
    this.hasNFC = value;
  }

  /**
   * Gets the value of the 'hasTelephony' field.
   * @return The value of the 'hasTelephony' field.
   */
  public java.lang.Boolean getHasTelephony() {
    return hasTelephony;
  }

  /**
   * Sets the value of the 'hasTelephony' field.
   * @param value the value to set.
   */
  public void setHasTelephony(java.lang.Boolean value) {
    this.hasTelephony = value;
  }

  /**
   * Gets the value of the 'hasGPS' field.
   * @return The value of the 'hasGPS' field.
   */
  public java.lang.Boolean getHasGPS() {
    return hasGPS;
  }

  /**
   * Sets the value of the 'hasGPS' field.
   * @param value the value to set.
   */
  public void setHasGPS(java.lang.Boolean value) {
    this.hasGPS = value;
  }

  /**
   * Gets the value of the 'hasAccelerometer' field.
   * @return The value of the 'hasAccelerometer' field.
   */
  public java.lang.Boolean getHasAccelerometer() {
    return hasAccelerometer;
  }

  /**
   * Sets the value of the 'hasAccelerometer' field.
   * @param value the value to set.
   */
  public void setHasAccelerometer(java.lang.Boolean value) {
    this.hasAccelerometer = value;
  }

  /**
   * Gets the value of the 'hasBarometer' field.
   * @return The value of the 'hasBarometer' field.
   */
  public java.lang.Boolean getHasBarometer() {
    return hasBarometer;
  }

  /**
   * Sets the value of the 'hasBarometer' field.
   * @param value the value to set.
   */
  public void setHasBarometer(java.lang.Boolean value) {
    this.hasBarometer = value;
  }

  /**
   * Gets the value of the 'hasCompass' field.
   * @return The value of the 'hasCompass' field.
   */
  public java.lang.Boolean getHasCompass() {
    return hasCompass;
  }

  /**
   * Sets the value of the 'hasCompass' field.
   * @param value the value to set.
   */
  public void setHasCompass(java.lang.Boolean value) {
    this.hasCompass = value;
  }

  /**
   * Gets the value of the 'hasGyroscope' field.
   * @return The value of the 'hasGyroscope' field.
   */
  public java.lang.Boolean getHasGyroscope() {
    return hasGyroscope;
  }

  /**
   * Sets the value of the 'hasGyroscope' field.
   * @param value the value to set.
   */
  public void setHasGyroscope(java.lang.Boolean value) {
    this.hasGyroscope = value;
  }

  /**
   * Gets the value of the 'hasLightsensor' field.
   * @return The value of the 'hasLightsensor' field.
   */
  public java.lang.Boolean getHasLightsensor() {
    return hasLightsensor;
  }

  /**
   * Sets the value of the 'hasLightsensor' field.
   * @param value the value to set.
   */
  public void setHasLightsensor(java.lang.Boolean value) {
    this.hasLightsensor = value;
  }

  /**
   * Gets the value of the 'hasProximity' field.
   * @return The value of the 'hasProximity' field.
   */
  public java.lang.Boolean getHasProximity() {
    return hasProximity;
  }

  /**
   * Sets the value of the 'hasProximity' field.
   * @param value the value to set.
   */
  public void setHasProximity(java.lang.Boolean value) {
    this.hasProximity = value;
  }

  /**
   * Gets the value of the 'bluetoothVersion' field.
   * @return The value of the 'bluetoothVersion' field.
   */
  public java.lang.String getBluetoothVersion() {
    return bluetoothVersion;
  }

  /**
   * Sets the value of the 'bluetoothVersion' field.
   * @param value the value to set.
   */
  public void setBluetoothVersion(java.lang.String value) {
    this.bluetoothVersion = value;
  }

  /**
   * Creates a new FeaturesData RecordBuilder.
   * @return A new FeaturesData RecordBuilder
   */
  public static com.iot.data.schema.FeaturesData.Builder newBuilder() {
    return new com.iot.data.schema.FeaturesData.Builder();
  }

  /**
   * Creates a new FeaturesData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FeaturesData RecordBuilder
   */
  public static com.iot.data.schema.FeaturesData.Builder newBuilder(com.iot.data.schema.FeaturesData.Builder other) {
    return new com.iot.data.schema.FeaturesData.Builder(other);
  }

  /**
   * Creates a new FeaturesData RecordBuilder by copying an existing FeaturesData instance.
   * @param other The existing instance to copy.
   * @return A new FeaturesData RecordBuilder
   */
  public static com.iot.data.schema.FeaturesData.Builder newBuilder(com.iot.data.schema.FeaturesData other) {
    return new com.iot.data.schema.FeaturesData.Builder(other);
  }

  /**
   * RecordBuilder for FeaturesData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FeaturesData>
    implements org.apache.avro.data.RecordBuilder<FeaturesData> {

    private java.lang.Boolean hasNFC;
    private java.lang.Boolean hasTelephony;
    private java.lang.Boolean hasGPS;
    private java.lang.Boolean hasAccelerometer;
    private java.lang.Boolean hasBarometer;
    private java.lang.Boolean hasCompass;
    private java.lang.Boolean hasGyroscope;
    private java.lang.Boolean hasLightsensor;
    private java.lang.Boolean hasProximity;
    private java.lang.String bluetoothVersion;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.FeaturesData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hasNFC)) {
        this.hasNFC = data().deepCopy(fields()[0].schema(), other.hasNFC);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hasTelephony)) {
        this.hasTelephony = data().deepCopy(fields()[1].schema(), other.hasTelephony);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hasGPS)) {
        this.hasGPS = data().deepCopy(fields()[2].schema(), other.hasGPS);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hasAccelerometer)) {
        this.hasAccelerometer = data().deepCopy(fields()[3].schema(), other.hasAccelerometer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hasBarometer)) {
        this.hasBarometer = data().deepCopy(fields()[4].schema(), other.hasBarometer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hasCompass)) {
        this.hasCompass = data().deepCopy(fields()[5].schema(), other.hasCompass);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hasGyroscope)) {
        this.hasGyroscope = data().deepCopy(fields()[6].schema(), other.hasGyroscope);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hasLightsensor)) {
        this.hasLightsensor = data().deepCopy(fields()[7].schema(), other.hasLightsensor);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hasProximity)) {
        this.hasProximity = data().deepCopy(fields()[8].schema(), other.hasProximity);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bluetoothVersion)) {
        this.bluetoothVersion = data().deepCopy(fields()[9].schema(), other.bluetoothVersion);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FeaturesData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.FeaturesData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.hasNFC)) {
        this.hasNFC = data().deepCopy(fields()[0].schema(), other.hasNFC);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hasTelephony)) {
        this.hasTelephony = data().deepCopy(fields()[1].schema(), other.hasTelephony);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hasGPS)) {
        this.hasGPS = data().deepCopy(fields()[2].schema(), other.hasGPS);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hasAccelerometer)) {
        this.hasAccelerometer = data().deepCopy(fields()[3].schema(), other.hasAccelerometer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hasBarometer)) {
        this.hasBarometer = data().deepCopy(fields()[4].schema(), other.hasBarometer);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.hasCompass)) {
        this.hasCompass = data().deepCopy(fields()[5].schema(), other.hasCompass);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hasGyroscope)) {
        this.hasGyroscope = data().deepCopy(fields()[6].schema(), other.hasGyroscope);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.hasLightsensor)) {
        this.hasLightsensor = data().deepCopy(fields()[7].schema(), other.hasLightsensor);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hasProximity)) {
        this.hasProximity = data().deepCopy(fields()[8].schema(), other.hasProximity);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bluetoothVersion)) {
        this.bluetoothVersion = data().deepCopy(fields()[9].schema(), other.bluetoothVersion);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'hasNFC' field.
      * @return The value.
      */
    public java.lang.Boolean getHasNFC() {
      return hasNFC;
    }

    /**
      * Sets the value of the 'hasNFC' field.
      * @param value The value of 'hasNFC'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasNFC(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.hasNFC = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hasNFC' field has been set.
      * @return True if the 'hasNFC' field has been set, false otherwise.
      */
    public boolean hasHasNFC() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hasNFC' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasNFC() {
      hasNFC = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasTelephony' field.
      * @return The value.
      */
    public java.lang.Boolean getHasTelephony() {
      return hasTelephony;
    }

    /**
      * Sets the value of the 'hasTelephony' field.
      * @param value The value of 'hasTelephony'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasTelephony(java.lang.Boolean value) {
      validate(fields()[1], value);
      this.hasTelephony = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hasTelephony' field has been set.
      * @return True if the 'hasTelephony' field has been set, false otherwise.
      */
    public boolean hasHasTelephony() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hasTelephony' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasTelephony() {
      hasTelephony = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasGPS' field.
      * @return The value.
      */
    public java.lang.Boolean getHasGPS() {
      return hasGPS;
    }

    /**
      * Sets the value of the 'hasGPS' field.
      * @param value The value of 'hasGPS'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasGPS(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.hasGPS = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hasGPS' field has been set.
      * @return True if the 'hasGPS' field has been set, false otherwise.
      */
    public boolean hasHasGPS() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hasGPS' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasGPS() {
      hasGPS = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasAccelerometer' field.
      * @return The value.
      */
    public java.lang.Boolean getHasAccelerometer() {
      return hasAccelerometer;
    }

    /**
      * Sets the value of the 'hasAccelerometer' field.
      * @param value The value of 'hasAccelerometer'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasAccelerometer(java.lang.Boolean value) {
      validate(fields()[3], value);
      this.hasAccelerometer = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hasAccelerometer' field has been set.
      * @return True if the 'hasAccelerometer' field has been set, false otherwise.
      */
    public boolean hasHasAccelerometer() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hasAccelerometer' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasAccelerometer() {
      hasAccelerometer = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasBarometer' field.
      * @return The value.
      */
    public java.lang.Boolean getHasBarometer() {
      return hasBarometer;
    }

    /**
      * Sets the value of the 'hasBarometer' field.
      * @param value The value of 'hasBarometer'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasBarometer(java.lang.Boolean value) {
      validate(fields()[4], value);
      this.hasBarometer = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hasBarometer' field has been set.
      * @return True if the 'hasBarometer' field has been set, false otherwise.
      */
    public boolean hasHasBarometer() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hasBarometer' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasBarometer() {
      hasBarometer = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasCompass' field.
      * @return The value.
      */
    public java.lang.Boolean getHasCompass() {
      return hasCompass;
    }

    /**
      * Sets the value of the 'hasCompass' field.
      * @param value The value of 'hasCompass'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasCompass(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.hasCompass = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'hasCompass' field has been set.
      * @return True if the 'hasCompass' field has been set, false otherwise.
      */
    public boolean hasHasCompass() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'hasCompass' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasCompass() {
      hasCompass = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasGyroscope' field.
      * @return The value.
      */
    public java.lang.Boolean getHasGyroscope() {
      return hasGyroscope;
    }

    /**
      * Sets the value of the 'hasGyroscope' field.
      * @param value The value of 'hasGyroscope'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasGyroscope(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.hasGyroscope = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hasGyroscope' field has been set.
      * @return True if the 'hasGyroscope' field has been set, false otherwise.
      */
    public boolean hasHasGyroscope() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hasGyroscope' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasGyroscope() {
      hasGyroscope = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasLightsensor' field.
      * @return The value.
      */
    public java.lang.Boolean getHasLightsensor() {
      return hasLightsensor;
    }

    /**
      * Sets the value of the 'hasLightsensor' field.
      * @param value The value of 'hasLightsensor'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasLightsensor(java.lang.Boolean value) {
      validate(fields()[7], value);
      this.hasLightsensor = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'hasLightsensor' field has been set.
      * @return True if the 'hasLightsensor' field has been set, false otherwise.
      */
    public boolean hasHasLightsensor() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'hasLightsensor' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasLightsensor() {
      hasLightsensor = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasProximity' field.
      * @return The value.
      */
    public java.lang.Boolean getHasProximity() {
      return hasProximity;
    }

    /**
      * Sets the value of the 'hasProximity' field.
      * @param value The value of 'hasProximity'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setHasProximity(java.lang.Boolean value) {
      validate(fields()[8], value);
      this.hasProximity = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'hasProximity' field has been set.
      * @return True if the 'hasProximity' field has been set, false otherwise.
      */
    public boolean hasHasProximity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'hasProximity' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearHasProximity() {
      hasProximity = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bluetoothVersion' field.
      * @return The value.
      */
    public java.lang.String getBluetoothVersion() {
      return bluetoothVersion;
    }

    /**
      * Sets the value of the 'bluetoothVersion' field.
      * @param value The value of 'bluetoothVersion'.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder setBluetoothVersion(java.lang.String value) {
      validate(fields()[9], value);
      this.bluetoothVersion = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bluetoothVersion' field has been set.
      * @return True if the 'bluetoothVersion' field has been set, false otherwise.
      */
    public boolean hasBluetoothVersion() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bluetoothVersion' field.
      * @return This builder.
      */
    public com.iot.data.schema.FeaturesData.Builder clearBluetoothVersion() {
      bluetoothVersion = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public FeaturesData build() {
      try {
        FeaturesData record = new FeaturesData();
        record.hasNFC = fieldSetFlags()[0] ? this.hasNFC : (java.lang.Boolean) defaultValue(fields()[0]);
        record.hasTelephony = fieldSetFlags()[1] ? this.hasTelephony : (java.lang.Boolean) defaultValue(fields()[1]);
        record.hasGPS = fieldSetFlags()[2] ? this.hasGPS : (java.lang.Boolean) defaultValue(fields()[2]);
        record.hasAccelerometer = fieldSetFlags()[3] ? this.hasAccelerometer : (java.lang.Boolean) defaultValue(fields()[3]);
        record.hasBarometer = fieldSetFlags()[4] ? this.hasBarometer : (java.lang.Boolean) defaultValue(fields()[4]);
        record.hasCompass = fieldSetFlags()[5] ? this.hasCompass : (java.lang.Boolean) defaultValue(fields()[5]);
        record.hasGyroscope = fieldSetFlags()[6] ? this.hasGyroscope : (java.lang.Boolean) defaultValue(fields()[6]);
        record.hasLightsensor = fieldSetFlags()[7] ? this.hasLightsensor : (java.lang.Boolean) defaultValue(fields()[7]);
        record.hasProximity = fieldSetFlags()[8] ? this.hasProximity : (java.lang.Boolean) defaultValue(fields()[8]);
        record.bluetoothVersion = fieldSetFlags()[9] ? this.bluetoothVersion : (java.lang.String) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
