/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iot.data.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContextData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4386219229326594268L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContextData\",\"namespace\":\"com.iot.data.schema\",\"fields\":[{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"FeaturesData\",\"fields\":[{\"name\":\"hasNFC\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasTelephony\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasGPS\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasAccelerometer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasBarometer\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasCompass\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasGyroscope\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasLightsensor\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"hasProximity\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"bluetoothVersion\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"DisplayData\",\"fields\":[{\"name\":\"displayHeight\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"displayWidth\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"displayDensity\",\"type\":[\"null\",\"long\"],\"default\":null}]}],\"default\":null},{\"name\":\"totalMemoryInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TotalMemoryInfoData\",\"fields\":[{\"name\":\"totalRAM\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"totalStorage\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.iot.data.schema.FeaturesData features;
  @Deprecated public com.iot.data.schema.DisplayData display;
  @Deprecated public com.iot.data.schema.TotalMemoryInfoData totalMemoryInfo;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContextData() {}

  /**
   * All-args constructor.
   * @param features The new value for features
   * @param display The new value for display
   * @param totalMemoryInfo The new value for totalMemoryInfo
   */
  public ContextData(com.iot.data.schema.FeaturesData features, com.iot.data.schema.DisplayData display, com.iot.data.schema.TotalMemoryInfoData totalMemoryInfo) {
    this.features = features;
    this.display = display;
    this.totalMemoryInfo = totalMemoryInfo;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return features;
    case 1: return display;
    case 2: return totalMemoryInfo;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: features = (com.iot.data.schema.FeaturesData)value$; break;
    case 1: display = (com.iot.data.schema.DisplayData)value$; break;
    case 2: totalMemoryInfo = (com.iot.data.schema.TotalMemoryInfoData)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'features' field.
   * @return The value of the 'features' field.
   */
  public com.iot.data.schema.FeaturesData getFeatures() {
    return features;
  }

  /**
   * Sets the value of the 'features' field.
   * @param value the value to set.
   */
  public void setFeatures(com.iot.data.schema.FeaturesData value) {
    this.features = value;
  }

  /**
   * Gets the value of the 'display' field.
   * @return The value of the 'display' field.
   */
  public com.iot.data.schema.DisplayData getDisplay() {
    return display;
  }

  /**
   * Sets the value of the 'display' field.
   * @param value the value to set.
   */
  public void setDisplay(com.iot.data.schema.DisplayData value) {
    this.display = value;
  }

  /**
   * Gets the value of the 'totalMemoryInfo' field.
   * @return The value of the 'totalMemoryInfo' field.
   */
  public com.iot.data.schema.TotalMemoryInfoData getTotalMemoryInfo() {
    return totalMemoryInfo;
  }

  /**
   * Sets the value of the 'totalMemoryInfo' field.
   * @param value the value to set.
   */
  public void setTotalMemoryInfo(com.iot.data.schema.TotalMemoryInfoData value) {
    this.totalMemoryInfo = value;
  }

  /**
   * Creates a new ContextData RecordBuilder.
   * @return A new ContextData RecordBuilder
   */
  public static com.iot.data.schema.ContextData.Builder newBuilder() {
    return new com.iot.data.schema.ContextData.Builder();
  }

  /**
   * Creates a new ContextData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContextData RecordBuilder
   */
  public static com.iot.data.schema.ContextData.Builder newBuilder(com.iot.data.schema.ContextData.Builder other) {
    return new com.iot.data.schema.ContextData.Builder(other);
  }

  /**
   * Creates a new ContextData RecordBuilder by copying an existing ContextData instance.
   * @param other The existing instance to copy.
   * @return A new ContextData RecordBuilder
   */
  public static com.iot.data.schema.ContextData.Builder newBuilder(com.iot.data.schema.ContextData other) {
    return new com.iot.data.schema.ContextData.Builder(other);
  }

  /**
   * RecordBuilder for ContextData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContextData>
    implements org.apache.avro.data.RecordBuilder<ContextData> {

    private com.iot.data.schema.FeaturesData features;
    private com.iot.data.schema.FeaturesData.Builder featuresBuilder;
    private com.iot.data.schema.DisplayData display;
    private com.iot.data.schema.DisplayData.Builder displayBuilder;
    private com.iot.data.schema.TotalMemoryInfoData totalMemoryInfo;
    private com.iot.data.schema.TotalMemoryInfoData.Builder totalMemoryInfoBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iot.data.schema.ContextData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.features)) {
        this.features = data().deepCopy(fields()[0].schema(), other.features);
        fieldSetFlags()[0] = true;
      }
      if (other.hasFeaturesBuilder()) {
        this.featuresBuilder = com.iot.data.schema.FeaturesData.newBuilder(other.getFeaturesBuilder());
      }
      if (isValidValue(fields()[1], other.display)) {
        this.display = data().deepCopy(fields()[1].schema(), other.display);
        fieldSetFlags()[1] = true;
      }
      if (other.hasDisplayBuilder()) {
        this.displayBuilder = com.iot.data.schema.DisplayData.newBuilder(other.getDisplayBuilder());
      }
      if (isValidValue(fields()[2], other.totalMemoryInfo)) {
        this.totalMemoryInfo = data().deepCopy(fields()[2].schema(), other.totalMemoryInfo);
        fieldSetFlags()[2] = true;
      }
      if (other.hasTotalMemoryInfoBuilder()) {
        this.totalMemoryInfoBuilder = com.iot.data.schema.TotalMemoryInfoData.newBuilder(other.getTotalMemoryInfoBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ContextData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iot.data.schema.ContextData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.features)) {
        this.features = data().deepCopy(fields()[0].schema(), other.features);
        fieldSetFlags()[0] = true;
      }
      this.featuresBuilder = null;
      if (isValidValue(fields()[1], other.display)) {
        this.display = data().deepCopy(fields()[1].schema(), other.display);
        fieldSetFlags()[1] = true;
      }
      this.displayBuilder = null;
      if (isValidValue(fields()[2], other.totalMemoryInfo)) {
        this.totalMemoryInfo = data().deepCopy(fields()[2].schema(), other.totalMemoryInfo);
        fieldSetFlags()[2] = true;
      }
      this.totalMemoryInfoBuilder = null;
    }

    /**
      * Gets the value of the 'features' field.
      * @return The value.
      */
    public com.iot.data.schema.FeaturesData getFeatures() {
      return features;
    }

    /**
      * Sets the value of the 'features' field.
      * @param value The value of 'features'.
      * @return This builder.
      */
    public com.iot.data.schema.ContextData.Builder setFeatures(com.iot.data.schema.FeaturesData value) {
      validate(fields()[0], value);
      this.featuresBuilder = null;
      this.features = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'features' field has been set.
      * @return True if the 'features' field has been set, false otherwise.
      */
    public boolean hasFeatures() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'features' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.iot.data.schema.FeaturesData.Builder getFeaturesBuilder() {
      if (featuresBuilder == null) {
        if (hasFeatures()) {
          setFeaturesBuilder(com.iot.data.schema.FeaturesData.newBuilder(features));
        } else {
          setFeaturesBuilder(com.iot.data.schema.FeaturesData.newBuilder());
        }
      }
      return featuresBuilder;
    }

    /**
     * Sets the Builder instance for the 'features' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.iot.data.schema.ContextData.Builder setFeaturesBuilder(com.iot.data.schema.FeaturesData.Builder value) {
      clearFeatures();
      featuresBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'features' field has an active Builder instance
     * @return True if the 'features' field has an active Builder instance
     */
    public boolean hasFeaturesBuilder() {
      return featuresBuilder != null;
    }

    /**
      * Clears the value of the 'features' field.
      * @return This builder.
      */
    public com.iot.data.schema.ContextData.Builder clearFeatures() {
      features = null;
      featuresBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'display' field.
      * @return The value.
      */
    public com.iot.data.schema.DisplayData getDisplay() {
      return display;
    }

    /**
      * Sets the value of the 'display' field.
      * @param value The value of 'display'.
      * @return This builder.
      */
    public com.iot.data.schema.ContextData.Builder setDisplay(com.iot.data.schema.DisplayData value) {
      validate(fields()[1], value);
      this.displayBuilder = null;
      this.display = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'display' field has been set.
      * @return True if the 'display' field has been set, false otherwise.
      */
    public boolean hasDisplay() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'display' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.iot.data.schema.DisplayData.Builder getDisplayBuilder() {
      if (displayBuilder == null) {
        if (hasDisplay()) {
          setDisplayBuilder(com.iot.data.schema.DisplayData.newBuilder(display));
        } else {
          setDisplayBuilder(com.iot.data.schema.DisplayData.newBuilder());
        }
      }
      return displayBuilder;
    }

    /**
     * Sets the Builder instance for the 'display' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.iot.data.schema.ContextData.Builder setDisplayBuilder(com.iot.data.schema.DisplayData.Builder value) {
      clearDisplay();
      displayBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'display' field has an active Builder instance
     * @return True if the 'display' field has an active Builder instance
     */
    public boolean hasDisplayBuilder() {
      return displayBuilder != null;
    }

    /**
      * Clears the value of the 'display' field.
      * @return This builder.
      */
    public com.iot.data.schema.ContextData.Builder clearDisplay() {
      display = null;
      displayBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalMemoryInfo' field.
      * @return The value.
      */
    public com.iot.data.schema.TotalMemoryInfoData getTotalMemoryInfo() {
      return totalMemoryInfo;
    }

    /**
      * Sets the value of the 'totalMemoryInfo' field.
      * @param value The value of 'totalMemoryInfo'.
      * @return This builder.
      */
    public com.iot.data.schema.ContextData.Builder setTotalMemoryInfo(com.iot.data.schema.TotalMemoryInfoData value) {
      validate(fields()[2], value);
      this.totalMemoryInfoBuilder = null;
      this.totalMemoryInfo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalMemoryInfo' field has been set.
      * @return True if the 'totalMemoryInfo' field has been set, false otherwise.
      */
    public boolean hasTotalMemoryInfo() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'totalMemoryInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.iot.data.schema.TotalMemoryInfoData.Builder getTotalMemoryInfoBuilder() {
      if (totalMemoryInfoBuilder == null) {
        if (hasTotalMemoryInfo()) {
          setTotalMemoryInfoBuilder(com.iot.data.schema.TotalMemoryInfoData.newBuilder(totalMemoryInfo));
        } else {
          setTotalMemoryInfoBuilder(com.iot.data.schema.TotalMemoryInfoData.newBuilder());
        }
      }
      return totalMemoryInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'totalMemoryInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.iot.data.schema.ContextData.Builder setTotalMemoryInfoBuilder(com.iot.data.schema.TotalMemoryInfoData.Builder value) {
      clearTotalMemoryInfo();
      totalMemoryInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'totalMemoryInfo' field has an active Builder instance
     * @return True if the 'totalMemoryInfo' field has an active Builder instance
     */
    public boolean hasTotalMemoryInfoBuilder() {
      return totalMemoryInfoBuilder != null;
    }

    /**
      * Clears the value of the 'totalMemoryInfo' field.
      * @return This builder.
      */
    public com.iot.data.schema.ContextData.Builder clearTotalMemoryInfo() {
      totalMemoryInfo = null;
      totalMemoryInfoBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public ContextData build() {
      try {
        ContextData record = new ContextData();
        if (featuresBuilder != null) {
          record.features = this.featuresBuilder.build();
        } else {
          record.features = fieldSetFlags()[0] ? this.features : (com.iot.data.schema.FeaturesData) defaultValue(fields()[0]);
        }
        if (displayBuilder != null) {
          record.display = this.displayBuilder.build();
        } else {
          record.display = fieldSetFlags()[1] ? this.display : (com.iot.data.schema.DisplayData) defaultValue(fields()[1]);
        }
        if (totalMemoryInfoBuilder != null) {
          record.totalMemoryInfo = this.totalMemoryInfoBuilder.build();
        } else {
          record.totalMemoryInfo = fieldSetFlags()[2] ? this.totalMemoryInfo : (com.iot.data.schema.TotalMemoryInfoData) defaultValue(fields()[2]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
